countingBreakPoints <- function(cnvData, segmentMean = 0.2, numProbes = NA){
unique_id <- unique(cnvData$Sample)
NumBpt <- setNames(data.frame(matrix(ncol = 2, nrow = length(unique_id)), stringsAsFactors = FALSE),c("sample_id","break_points"))
for (i in 1:length(unique_id)){
id <- unique_id[i]
exSample<-subset(cnvData, cnvData$Sample == id )
exSample<-subset(exSample, abs(exSample$Segment_Mean) >= segmentMean)
if (!is.na(numProbes)){
exSample<-subset(exSample, abs(exSample$Num_Probes) >= numProbes)
}
number <- nrow(exSample) * 2 # Multiplied by 2 because of counting 5' and 3' breakpoints
NumBpt[i,] <- number
}
return(NumBpt)
}
break.points <- countingBreakPoints(cnvData = maskCNV.BRCA)
View(break.points)
##### countingBreakPoints ######
# The Break Point calculation takes all the CNV data for a single patient and first filters it for segmentation mean of > 0.2 and, if specified, the minimum number of probes
# covering that area. Then it counts the number of rows of data and multiplies it by 2. This represents the break points at the 5' and 3' ends of each segment.
# Input: Sample IDs, CNV data
# Output: Number of rows for each Sample ID * 2
#' @param cnvData dataframe containing following columns: Sample, Start, End, Num_Probes, Segment_Mean
#' @param segmentMean numerical value for the minimum segment_mean cutoff/ threshold. Default is 0.2
#' @param numProbes Number of Probes
#' @return Number of Break points for each unique sample
#' @export
countingBreakPoints <- function(cnvData, segmentMean = 0.2, numProbes = NA){
unique_id <- unique(cnvData$Sample)
NumBpt <- setNames(data.frame(matrix(ncol = 2, nrow = length(unique_id)), stringsAsFactors = FALSE),c("sample_id","break_points"))
for (i in 1:length(unique_id)){
id <- unique_id[i]
exSample<-subset(cnvData, cnvData$Sample == id )
exSample<-subset(exSample, abs(exSample$Segment_Mean) >= segmentMean)
if (!is.na(numProbes)){
exSample<-subset(exSample, abs(exSample$Num_Probes) >= numProbes)
}
number <- nrow(exSample) * 2 # Multiplied by 2 because of counting 5' and 3' breakpoints
NumBpt$break_points[i] <- number
NumBpt$sample_id[i] <- id
}
return(NumBpt)
}
break.points <- countingBreakPoints(cnvData = maskCNV.BRCA)
View(break.points)
#' Modified Total Aberration Index
#' Modified Total Aberration Index calculation takes the sum of lengths of each segment
#' times its segmentation mean for each sample and divides it by the sum of the
#' lengths of each sample.
#' @param cnvData dataframe containing following columns: Sample, Start, End, Num_Probes, Segment_Mean
#' @param segmentMean numerical value for the minimum segment_mean cutoff/ threshold. Default is 0.2
#' @param numProbes Number of Probes
#' @return Average of lengths weighted by segmentation mean for each unique sample
#' @export
mod.tai <- function(cnvData, segmentMean = 0, numProbes = NA ){
unique_id <- unique(cnvData$Sample)
tai.output <- setNames(data.frame(matrix(ncol = 2, nrow = length(unique_id)), stringsAsFactors = FALSE),c("sample_id","modified_tai"))
for (i in 1:length(ids)){
id <- unique_id[i]
subsetSample <- subset(cnvData, cnvData$Sample == id )
subsetSample <- subset(subsetSample, abs(subsetSample$Segment_Mean) >= segmentMean)
if (!is.na(numProbes)){
subsetSample<-subset(subsetSample, abs(subsetSample$Num_Probes) >= numProbes)
}
Length <- subsetSample$End - subsetSample$Start
num <- Length*subsetSample$Segment_Mean
den <- Length
tai.calc <- sum(sum(num)/sum(den))
tai.output$modified_tai[i] <- tai.calc
tai.output$sample_id[i] <- id
}
return(tai.output)
}
modified.tai <- modified.tai(cnvData = maskCNV.BRCA)
#' Modified Total Aberration Index
#' Modified Total Aberration Index calculation takes the sum of lengths of each segment
#' times its segmentation mean for each sample and divides it by the sum of the
#' lengths of each sample.
#' @param cnvData dataframe containing following columns: Sample, Start, End, Num_Probes, Segment_Mean
#' @param segmentMean numerical value for the minimum segment_mean cutoff/ threshold. Default is 0.2
#' @param numProbes Number of Probes
#' @return Average of lengths weighted by segmentation mean for each unique sample
#' @export
modified.tai <- function(cnvData, segmentMean = 0, numProbes = NA ){
unique_id <- unique(cnvData$Sample)
tai.output <- setNames(data.frame(matrix(ncol = 2, nrow = length(unique_id)), stringsAsFactors = FALSE),c("sample_id","modified_tai"))
for (i in 1:length(ids)){
id <- unique_id[i]
subsetSample <- subset(cnvData, cnvData$Sample == id )
subsetSample <- subset(subsetSample, abs(subsetSample$Segment_Mean) >= segmentMean)
if (!is.na(numProbes)){
subsetSample<-subset(subsetSample, abs(subsetSample$Num_Probes) >= numProbes)
}
Length <- subsetSample$End - subsetSample$Start
num <- Length*subsetSample$Segment_Mean
den <- Length
tai.calc <- sum(sum(num)/sum(den))
tai.output$modified_tai[i] <- tai.calc
tai.output$sample_id[i] <- id
}
return(tai.output)
}
modified.tai <- modified.tai(cnvData = maskCNV.BRCA)
#' Modified Total Aberration Index
#' Modified Total Aberration Index calculation takes the sum of lengths of each segment
#' times its segmentation mean for each sample and divides it by the sum of the
#' lengths of each sample.
#' @param cnvData dataframe containing following columns: Sample, Start, End, Num_Probes, Segment_Mean
#' @param segmentMean numerical value for the minimum segment_mean cutoff/ threshold. Default is 0.2
#' @param numProbes Number of Probes
#' @return Average of lengths weighted by segmentation mean for each unique sample
#' @export
modified.tai <- function(cnvData, segmentMean = 0, numProbes = NA ){
unique_id <- unique(cnvData$Sample)
tai.output <- setNames(data.frame(matrix(ncol = 2, nrow = length(unique_id)), stringsAsFactors = FALSE),c("sample_id","modified_tai"))
for (i in 1:length(unique_id)){
id <- unique_id[i]
subsetSample <- subset(cnvData, cnvData$Sample == id )
subsetSample <- subset(subsetSample, abs(subsetSample$Segment_Mean) >= segmentMean)
if (!is.na(numProbes)){
subsetSample<-subset(subsetSample, abs(subsetSample$Num_Probes) >= numProbes)
}
Length <- subsetSample$End - subsetSample$Start
num <- Length*subsetSample$Segment_Mean
den <- Length
tai.calc <- sum(sum(num)/sum(den))
tai.output$modified_tai[i] <- tai.calc
tai.output$sample_id[i] <- id
}
return(tai.output)
}
modified.tai <- modified.tai(cnvData = maskCNV.BRCA)
#' Modified Total Aberration Index
#' Modified Total Aberration Index calculation takes the sum of lengths of each segment
#' times its segmentation mean for each sample and divides it by the sum of the
#' lengths of each sample.
#' @param cnvData dataframe containing following columns: Sample, Start, End, Num_Probes, Segment_Mean
#' @param segmentMean numerical value for the minimum segment_mean cutoff/ threshold. Default is 0.2
#' @param numProbes Number of Probes
#' @return Average of lengths weighted by segmentation mean for each unique sample
#' @export
taiModified <- function(cnvData, segmentMean = 0, numProbes = NA ){
unique_id <- unique(cnvData$Sample)
tai.output <- setNames(data.frame(matrix(ncol = 2, nrow = length(unique_id)), stringsAsFactors = FALSE),c("sample_id","modified_tai"))
for (i in 1:length(unique_id)){
id <- unique_id[i]
subsetSample <- subset(cnvData, cnvData$Sample == id )
subsetSample <- subset(subsetSample, abs(subsetSample$Segment_Mean) >= segmentMean)
if (!is.na(numProbes)){
subsetSample<-subset(subsetSample, abs(subsetSample$Num_Probes) >= numProbes)
}
Length <- subsetSample$End - subsetSample$Start
num <- Length*subsetSample$Segment_Mean
den <- Length
tai.calc <- sum(sum(num)/sum(den))
tai.output$modified_tai[i] <- tai.calc
tai.output$sample_id[i] <- id
}
return(tai.output)
}
modified.tai <- taiModified(cnvData = maskCNV.BRCA)
View(modified.tai)
library(devtools)
pkgload::load_all()
rm(list = c("countingBaseSegments", "countingBreakPoints", "mod.tai", "taiModified"))
pkgload::load_all()
#cnv <- maskCNV.BRCA$Segment_Mean
tai.test <- tai(cnvData = maskCNV.BRCA)
tai.test1 <- CINmetrics::tai.original(ids = sam_id, maskCNV.BRCA)
View(tai.test1)
library(TCGAbiolinks)
query.maskCNV.hg39.BRCA <- GDCquery(project = "TCGA-BRCA",
data.category = "Copy Number Variation",
data.type = "Masked Copy Number Segment", legacy=FALSE)
query.maskCNV.hg39.BRCA <- GDCquery(project = "TCGA-BRCA",
data.category = "Copy Number Variation",
data.type = "Masked Copy Number Segment", legacy=FALSE)
#GDCdownload(query = query.maskCNV.hg39.BRCA)
maskCNV.BRCA <- GDCprepare(query = query.maskCNV.hg39.BRCA, summarizedExperiment = FALSE)
#GDCdownload(query = query.maskCNV.hg39.BRCA)
maskCNV.BRCA <- GDCprepare(query = query.maskCNV.hg39.BRCA, summarizedExperiment = FALSE)
maskCNV.BRCA <- data.frame(maskCNV.BRCA, stringsAsFactors = FALSE)
library(devtools)
pkgload::load_all()
tai.test <- CINmetrics::tai(cnvData = maskCNV.BRCA)
View(tai.test)
save(maskCNV.BRCA, file = "/data/BRCA_maskCNV.RData")
library(DT)
save(maskCNV.BRCA, file = "/data/BRCA_maskCNV.RData")
save(maskCNV.BRCA, file = "/data/BRCA_maskCNV.RData")
usethis::use_data(maskCNV.BRCA, BRCA_maskCNV)
usethis::use_data(maskCNV.BRCA, maskCNV.BRCA)
data("maskCNV.BRCA")
library(CINmetrics)
data("maskCNV.BRCA")
tai.test <- tai(cnvData = maskCNV.BRCA)
query.maskCNV.hg39.BRCA <- GDCquery(project = "TCGA-BRCA",
data.category = "Copy Number Variation",
data.type = "Masked Copy Number Segment", legacy=FALSE)
maskCNV.BRCA <- GDCprepare(query = query.maskCNV.hg39.BRCA, summarizedExperiment = FALSE)
## Not run:
library(TCGAbiolinks)
query.maskCNV.hg39.BRCA <- GDCquery(project = "TCGA-BRCA",
data.category = "Copy Number Variation",
data.type = "Masked Copy Number Segment", legacy=FALSE)
GDCdownload(query = query.maskCNV.hg39.BRCA)
maskCNV.BRCA <- GDCprepare(query = query.maskCNV.hg39.BRCA, summarizedExperiment = FALSE)
maskCNV.BRCA <- data.frame(maskCNV.BRCA, stringsAsFactors = FALSE)
save(maskCNV.BRCA, file="data/maskCNV.BRCA.RData")
save(maskCNV.BRCA, file="data/maskCNV.BRCA.RData")
usethis::use_data(maskCNV.BRCA, maskCNV.BRCA.RData)
usethis::use_data(maskCNV.BRCA, maskCNV.BRCA.RData, compress = "bzip2")
usethis::use_data(maskCNV.BRCA, maskCNV.BRCA.RData, compress = "bzip2", overwrite = TRUE)
usethis::use_data(maskCNV.BRCA, maskCNV.BRCA, compress = "bzip2", overwrite = TRUE)
usethis::use_data(maskCNV.BRCA, maskCNV.BRCA, compress = "xz", overwrite = TRUE)
usethis::use_data(maskCNV.BRCA, maskCNV.BRCA, compress = "gzip", overwrite = TRUE)
usethis::use_data(maskCNV.BRCA, maskCNV.BRCA, compress = "xz", overwrite = TRUE)
library(devtools)
pkgload::load_all()
pkgload::load_all()
library(CINmetrics)
data("maskCNV.BRCA")
pkgload::load_all()
fraction.genome <- fga(cnvData = maskCNV.BRCA)
pkgload::load_all()
fraction.genome <- fga(cnvData = maskCNV.BRCA)
View(fraction.genome)
View(tai.test)
library(devtools)
install_github("lasseignelab/CINmetrics")
data("maskCNV.BRCA")
head(maskCNV.BRCA)
library(TCGAbiolinks)
library(TCGAbiolinks)
query.maskCNV.hg39.BRCA <- GDCquery(project = "TCGA-BRCA",
data.category = "Copy Number Variation",
data.type = "Masked Copy Number Segment", legacy=FALSE)
GDCdownload(query = query.maskCNV.hg39.BRCA)
maskCNV.BRCA.test <- GDCprepare(query = query.maskCNV.hg39.BRCA, summarizedExperiment = FALSE)
maskCNV.BRCA.test <- data.frame(maskCNV.BRCA.test, stringsAsFactors = FALSE)
tai.test <- tai(cnvData = maskCNV.BRCA.test)
library(CINmetrics)
tai.test <- tai(cnvData = maskCNV.BRCA.test)
View(tai.test)
x = list(a=1, b=2, c=NULL)
x
length(x)
x$c
rm(x)
query.maskCNV.hg39.BRCA <- GDCquery(project = "TCGA-BRCA",
data.category = "Copy Number Variation",
data.type = "Masked Copy Number Segment", legacy=FALSE)
library(devtools)
install_github("lasseignelab/CINmetrics")
library(CINmetrics)
data("maskCNV.BRCA")
head(maskCNV.BRCA)
GDCdownload(query = query.maskCNV.hg39.BRCA)
query.maskCNV.hg39.BRCA <- GDCquery(project = "TCGA-BRCA",
data.category = "Copy Number Variation",
data.type = "Masked Copy Number Segment", legacy=FALSE)
GDCdownload(query = query.maskCNV.hg39.BRCA)
BiocManager::install("annotatr")
library(annotatr)
build_gene_annots(
genome = annotatr::builtin_genomes(),
annotations = annotatr::builtin_annotations()
)
annotatr::build_gene_annots(
genome = annotatr::builtin_genomes(),
annotations = annotatr::builtin_annotations()
)
annotatr:::build_gene_annots(
genome = annotatr::builtin_genomes(),
annotations = annotatr::builtin_annotations()
)
annotatr:::build_gene_annots(
genome = annotatr:::builtin_genomes(),
annotations = annotatr:::builtin_annotations()
)
BiocManager::install("ENCODExplorerData") # load in the ENCODExplorerData
BiocManager::install("ENCODExplorer")
install.packages("mgcv")
install.packages("mgcv")
install.packages("mgcv")
BiocManager::install("ENCODExplorerData") # load in the ENCODExplorerData
BiocManager::install("ENCODExplorer")
library(ENCODExplorerData)
library(ENCODExplorer)
#download the ENCODE metadata:
encode_df_demo <- get_encode_df_demo() #gets the demo data.....for some reason cannot pull the full data...
encode_df <- get_encode_df_full() #NOTE: In order to work system needs R version 4.0 and BiocManager version 3.12!!!!
encode_df <- get_encode_df_full() #NOTE: In order to work system needs R version 4.0 and BiocManager version 3.12!!!!
#download the ENCODE metadata:
encode_df_demo <- get_encode_df_demo() #gets the demo data.....for some reason cannot pull the full data...
require(AnnotationHub)
hub <- AnnotationHub()
install.packages("BiocManager")
BiocManager::install("ENCODExplorerData") # load in the ENCODExplorerData
library(ENCODExplorerData)
BiocManager::install("ENCODExplorer")
library(ENCODExplorer)
encode_df <- get_encode_df_full() #NOTE: In order to work system needs R version 4.0 and BiocManager version 3.12!!!!
require(AnnotationHub)
ah = AnnotationHub()
query(ah, "ENCODExplorerData") #Note the version build you want and use it as an input below in paranthesis.
# You can use AnnotationHub to retrieve encode_df_full.
library(AnnotationHub)
hub <- AnnotationHub()
myENCODEfiles <- subset(hub, title=="ENCODE File Metadata (Full, 2019-10-13 build)")
hub <- AnnotationHub()
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
BiocManager::install("AnnotationHub")
BiocManager::install("ENCODExplorerData") # load in the ENCODExplorerData
library(ENCODExplorerData)
library(ENCODExplorer)
# You can use AnnotationHub to retrieve encode_df_full.
library(AnnotationHub)
hub <- AnnotationHub()
vignette('programming')
```{r load_encodeDF}
encode_df <- get_encode_df()
humanANDmouse_cCREencode <- read.csv("/Users/vishal/Documents/R_scripts/metadata.tsv", sep = "\t")
library(ggplot2)
#Distribution of cCREs across Biosamples
ggplot(humanANDmouse_cCREencode, aes(x = Biosample.type )) + geom_histogram(bins = 10, stat = "count") +
facet_wrap(~Organism, scales = 'free') +
labs(x = 'Biosample Type', title = 'Distribution of cCREs across Biosamples') +
theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle=45))
humanANDmouse_cCREtissues <- subset(humanANDmouse_cCREencode, Biosample.type == "tissue")
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme(axis.text.x = element_text(angle=90, hjust = 0.6)) + coord_flip()
cCREs_dist
library(ggrepel)
geom_text_repel(cCREs_dist)
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme(axis.text.x = element_text(angle=90, hjust = 0.6)) + coord_flip() + geom_text_repel()
cCREs_dist
View(humanANDmouse_cCREtissues)
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme(axis.text.x = element_text(angle=90, hjust = 0.6)) + coord_flip() + geom_text_repel(aes(y = stat))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme(axis.text.x = element_text(angle=90, hjust = 0.6)) + coord_flip() + geom_text_repel(aes(y = after_stat))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme(axis.text.x = element_text(angle=90, hjust = 0.6)) + coord_flip() + geom_text_repel(stat = "count")
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme(axis.text.x = element_text(angle=90, hjust = 0.6)) + coord_flip() + geom_text_repel(label = Biosample.term.name, stat = "count")
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme(axis.text.x = element_text(angle=90, hjust = 0.6)) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count")
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme(axis.text.x = element_text(angle=90, hjust = 0.6)) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 20)
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme(axis.text.x = element_text(angle=90, hjust = 0.6)) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100)
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100)
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_bw() + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100)
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal() + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100)
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal() + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, label.padding = 0.5)
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, label.padding = 0.5)
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal() + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, label.padding = 0.5)
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal() + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, label.padding = 0.1)
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal() + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, label.size = 2)
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal() + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, nudge_y = 0.5)
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal() + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count"), max.overlaps = 100, nudge_y = 0.5)
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal() + coord_flip() + geom_text_repel(aes(label = Biosample.term.name, size = 0.2), stat = "count", max.overlaps = 100, nudge_y = 0.5)
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal() + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme(axis.text.x = element_text(angle=90, hjust = 0.6)) + coord_flip()
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal() + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name, size = 0.5)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal() + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name), size = 0.5) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal() + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name), size = 0.2) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal() + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal() + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal(axis.text.y = element_text(color = "grey20", size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain")) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal(text = element_text(color = "grey20", size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain")) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
theme_minimal(text = element_text(color = "grey20", size = 12) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal(text = element_text(color = "grey20", size = 12)) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
library(ggrepel)
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme_minimal(text = element_text(color = "grey20", size = 12)) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme(text = element_text(color = "grey20", size = 12)) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme(axis.text.y = element_text(color = "grey20", size = 12, angle = 0, hjust = 1, vjust = 0, face = "plain")) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme(axis.text.y = element_text(color = "black", size = 8, angle = 0, hjust = 1, vjust = 0, face = "plain")) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') +
theme(axis.text.y = element_text(color = "black", size = 6, angle = 0, hjust = 1, vjust = 0, face = "plain")) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme_minimal() +
theme(axis.text.y = element_text(color = "black", size = 6, angle = 0, hjust = 1, vjust = 0, face = "plain")) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme_minimal() +
theme(axis.text.y = element_text(color = "black", size = 6, angle = 0, hjust = 1, vjust = 0, face = "bold")) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme_minimal() +
theme(axis.text.y = element_text(color = "black", size = 8, angle = 45, hjust = 1, vjust = 0, face = "bold")) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme_minimal() +
theme(axis.text.y = element_text(color = "black", size = 8, angle = 30, hjust = 1, vjust = 0, face = "bold")) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme_minimal() +
theme(axis.text.y = element_text(color = "black", size = 7, angle = 0, hjust = 1, vjust = 0, face = "bold")) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme_minimal() +
theme(axis.text.y = element_text(color = "black", size = 7, angle = 0, hjust = 1, vjust = 0, face = "bold"), plot.title = element_text(color = "tomato", size = 12, face = "bold"),) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme_minimal() +
theme(axis.text.y = element_text(color = "black", size = 6, angle = 0, hjust = 1, vjust = 0, face = "bold"), plot.title = element_text(color = "tomato", size = 12, face = "bold"),) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme_minimal() +
theme(axis.text.y = element_text(color = "black", size = 6, angle = 0, hjust = 1, vjust = 0, face = "bold"), plot.title = element_text(color = "tomato", size = 12, face = "bold", hjust = 0.5),) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme_minimal() +
theme(axis.text.y = element_text(color = "black", size = 6, angle = 0, hjust = 1, vjust = 0, face = "bold"), plot.title = element_text(color = "tomato", size = 12, face = "bold", hjust = 0.5), axis.ticks = element_blank()) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count", aes(colour = "darkgrey", alpha = 0.5)) + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme_minimal() +
theme(axis.text.y = element_text(color = "black", size = 6, angle = 0, hjust = 1, vjust = 0, face = "bold"), plot.title = element_text(color = "tomato", size = 12, face = "bold", hjust = 0.5), axis.ticks = element_blank()) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count", aes(fill = "darkgrey", alpha = 0.5)) + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme_minimal() +
theme(axis.text.y = element_text(color = "black", size = 6, angle = 0, hjust = 1, vjust = 0, face = "bold"), plot.title = element_text(color = "tomato", size = 12, face = "bold", hjust = 0.5), axis.ticks = element_blank()) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count", aes(fill = "black", alpha = 0.5)) + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme_minimal() +
theme(axis.text.y = element_text(color = "black", size = 6, angle = 0, hjust = 1, vjust = 0, face = "bold"), plot.title = element_text(color = "tomato", size = 12, face = "bold", hjust = 0.5), axis.ticks = element_blank()) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme_minimal() +
theme(axis.text.y = element_text(color = "black", size = 6, angle = 0, hjust = 1, vjust = 0, face = "bold"), plot.title = element_text(color = "tomato", size = 12, face = "bold", hjust = 0.5), axis.ticks = element_blank()) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme_minimal() +
theme(axis.text.y = element_text(color = "black", size = 6, angle = 0, hjust = 1, vjust = 0, face = "bold"), plot.title = element_text(color = "tomato", size = 12, face = "bold", hjust = 0.5), axis.ticks = element_blank()) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100, ylim = c(-Inf, Inf))
cCREs_dist
cCREs_dist <- ggplot(humanANDmouse_cCREtissues, aes(x = Biosample.term.name)) + geom_bar(stat = "count") + facet_wrap(~Organism, scales = 'free') + labs(x = 'Tissue Type', title = 'Distribution of ENCODE cCREs across tissues') + theme_minimal() +
theme(axis.text.y = element_text(color = "black", size = 6, angle = 0, hjust = 1, vjust = 0, face = "bold"), plot.title = element_text(color = "tomato", size = 12, face = "bold", hjust = 0.5), axis.ticks = element_blank()) + coord_flip() + geom_text_repel(aes(label = Biosample.term.name), stat = "count", max.overlaps = 100)
cCREs_dist
library(CINmetrics)
library(CINmetrics)
library(CINmetrics)
library(CINmetrics)
library(CINmetrics)
library(CINmetrics)
library(CINmetrics)
library(CINmetrics)
library(CINmetrics)
library(org.Hs.eg.db)
library(AnnotationDbi)
# Check object metadata
org.Hs.eg.db
annotations_orgDb <- AnnotationDbi::select(org.Hs.eg.db, # database
keys = res_tableOE_tb$gene,  # data to use for retrieval
columns = c("SYMBOL", "ENTREZID","GENENAME"), # information to retreive for given data
keytype = "ENSEMBL") # type of data given in 'keys' argument
library(EnsDb.Hsapiens.v86)
BiocManager::install("EnsDb.Hsapiens.v86")
BiocManager::install("EnsDb.Hsapiens.v86")
gtex_data <- read.csv("/Users/vishal/Downloads/GTEx_tissue_median_gene_tpm.csv", header = TRUE, stringAsFactors = FALSE)
gtex_data <- read.csv("/Users/vishal/Downloads/GTEx_tissue_median_gene_tpm.csv", header = TRUE, stringsAsFactors = FALSE)
View(gtex_data)
annotations_orgDb <- AnnotationDbi::select(org.Hs.eg.db, # database
keys = gtex_data$Name,  # data to use for retrieval
columns = c("SYMBOL", "ENTREZID","GENENAME"), # information to retreive for given data
keytype = "ENSEMBL") # type of data given in 'keys' argument
keys(org.Hs.eg.db)
gtex_data$Name
keytypes(org.Hs.eg.db)
annotations_orgDb <- AnnotationDbi::select(org.Hs.eg.db, # database
keys = gtex_data$Name,  # data to use for retrieval
columns = c("SYMBOL", "ENTREZID","GENENAME"), # information to retreive for given data
keytype = "ENSEMBLTRANS") # type of data given in 'keys' argument
keytypes(org.Hs.eg.db)
library(CINmetrics)
library(TCGAbiolinks)
query.maskCNV.hg39.BRCA <- GDCquery(project = "TCGA-BRCA",
data.category = "Copy Number Variation",
data.type = "Masked Copy Number Segment", legacy=FALSE)
query.maskCNV.hg39.BRCA <- GDCquery(project = "TCGA-BRCA",
data.category = "Copy Number Variation",
data.type = "Masked Copy Number Segment", legacy=FALSE)
GDCdownload(query = query.maskCNV.hg39.BRCA)
