##### countingBaseSegments #####
### Functions for counting base segments and counting break points -- originally written by Jen Fisher 2018.07.09
# The Base Segment calculation takes all the CNV data for a single patient and first filters it for a segmentation mean of > 0.2 and, if specified, the minimum number of probes
# covering that area. Then, it then calculates the sums the lengths of each segment for a particular patient and outputs that.
# Input: Sample IDs, CNV data
# Output: Summed length of all segments for a particular Sample ID.
countingBaseSegments <- function(ids, CNVmask_data, segMean = 0.2, numProbes = NA ){
  #k <- length(ids)
  NumBases <- data.frame(matrix(ncol = 1, nrow = length(ids)))
  for (i in 1:length(ids)){
    id <- ids[i]
    exSample<-subset(CNVmask_data, CNVmask_data$Sample == id )
    exSample<-subset(exSample, abs(exSample$Segment_Mean) >= segMean)
    if (!is.na(numProbes)){
      exSample<-subset(exSample, abs(exSample$Num_Probes) >= numProbes)
    }
    segSizes<-exSample$End - exSample$Start
    count <- sum(segSizes)
    NumBases[i,] <- count
  }
  return(NumBases)
}

##### countingBreakPoints ######
# The Break Point calculation takes all the CNV data for a single pation and first filters it for a segmentation mean of > 0.2 and, if specified, the minimum number of probes
# covering that area. Then it counts the number of rows of data and multiplies it by 2. This represents the break points at the 5' and 3' ends of each segment.
# Input: Sample IDs, CNV data
# Output: Number of rows for each Sample ID * 2
countingBreakPoints <- function(ids, CNVmask_data, segMean = 0.2, numProbes = NA){
  #k <- length(ids)
  NumBpt <- data.frame(matrix(ncol = 1, nrow = length(ids)))
  for (i in 1:length(ids)){
    id <- ids[i]
    exSample<-subset(CNVmask_data, CNVmask_data$Sample == id )
    exSample<-subset(exSample, abs(exSample$Segment_Mean) >= segMean)
    if (!is.na(numProbes)){
      exSample<-subset(exSample, abs(exSample$Num_Probes) >= numProbes)
    }
    number <- nrow(exSample) * 2 # Multiplied by 2 because of counting 5' and 3' breakpoints
    NumBpt[i,] <- number
  }
  return(NumBpt)
}
